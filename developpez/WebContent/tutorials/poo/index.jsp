
<h1>Introduction</h1>
<p>
Si vous n'avez jamais utilisé auparavant un langage orienté objet, 
l'objectif de ce chapitre consiste en une introduction aux concepts 
de base de la programmation orientée objet (POO). Nous aurons à étudier la notion de classe, d'objet, d'association, d'héritage, d'interface, de package et de pattern ainsi que leur implementation avec le langage Java. 
</p>
<hr/>
<h2>Classe</h2>
<p>
Dans le monde réel, il est fréquent de rencontrer des objets de même type ou classe. Par exemple, il existe des milliers de voitures. Une voiture est entre autre définie par une marque et un modèle qui sont ses attributs
et son comportement définit ses actions... 
<a class="readmore" href="<%=request.getContextPath()%>/poo/classe">[Lire la suite]</a>
</p>
<hr/>
<h2>Objet</h2>
<p>
Un objet est une instance d'une classe et naturellement, il peut exister au sein d'une même application, plusieurs objets du même type. Un objet est obtenu par instantiation, ici nous créons une seule voiture v de marque BMX et de modèle X5... <a class="readmore" href="<%=request.getContextPath()%>/poo/objet">[Lire la suite]</a>
</p>
<hr/>
<h2>Association</h2>
<p>
Une association est la relation inter-classes qui permet à un objet d'une classe de pouvoir collaborer avec un autre objet d'une autre classe. Leur relation peut être unidirectionnelle ou bidirectionnelle. Par exemple, une Voiture v a un propriétaire p qui est de type Personne...
<a class="readmore" href="<%=request.getContextPath()%>/poo/association">[Lire la suite]</a>  
</p>
<hr/>
<h2>Héritage</h2>
<p>
L'héritage est spécifique à la programmation orientée objet. Elle consiste à créer une nouvelle classe à partir d'une classe de base et de mettre en place une hiérarchie. La classe dérivée contiendra les attributs et les méthodes de la classe mère... <a class="readmore" href="<%=request.getContextPath()%>/poo/heritage">[ Lire la suite ]</a>
</p>
<hr/>
<h2>Interface</h2>
<p>
Une interface definit une action ou un groupe d'actions prédéfinis qui doivent être réalisés par la classe ou les classes qui l'implémentent. Elle permet ainsi la mise en oeuvre d'une application dynamique et de plusieurs solutions à un même problème donné...  <a class="readmore" href="<%=request.getContextPath()%>/poo/interface">[Lire la suite]</a>
</p>
<hr/>
<h2>Package</h2>
<p>
Un package est assimilable à un répertoire pour ranger une classe, une interface ou tout autre fichier logiciel. Il permet une structuration de l'application pour la rendre modulaire. Un package peut être compressé dans une archive pour faciliter sa distribution...
<a class="readmore" href="<%=request.getContextPath()%>/poo/package">[Lire la suite]</a>
</p>
<hr/>
<h2>API</h2>
<p>
Une interface de programmation d'application (API) est un ensemble de définitions de sous-programmes, protocoles et outils pour la construction de logiciels et d'applications. Une bonne API facilite l'élaboration d'un programme en fournissant tous les blocs de construction...
<a class="readmore" href="<%=request.getContextPath()%>/poo/api">[Lire la suite]</a>
</p>
<hr/>
<h2>Pattern</h2>
<p>
Dans l'informatique, un pattern est une solution générale à un problème commun rencontré dans un contexte donné. C'est un modèle abstrait existant qui peut être réutilisé dans votre application et son implémentation vous incombe totalement...
<a class="readmore" href="<%=request.getContextPath()%>/poo/pattern">[Lire la suite]</a>
</p>